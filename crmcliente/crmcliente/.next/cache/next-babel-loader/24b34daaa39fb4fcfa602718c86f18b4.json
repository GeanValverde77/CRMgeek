{"ast":null,"code":"var __jsx = React.createElement;\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == typeof i ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != typeof i) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nimport React, { useEffect } from 'react';\nimport Layout from '../components/Layout';\nimport { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend } from 'recharts';\nimport { gql, useQuery } from '@apollo/client';\nconst MEJORES_CLIENTES = gql`\n    query mejoresClientes {\n            mejoresClientes {\n            cliente {\n                nombre\n                empresa\n            }\n            total\n        }\n    }\n`;\nconst MejoresClientes = () => {\n  const {\n    data,\n    loading,\n    error,\n    startPolling,\n    stopPolling\n  } = useQuery(MEJORES_CLIENTES);\n  useEffect(() => {\n    startPolling(1000);\n    return () => {\n      stopPolling();\n    };\n  }, [startPolling, stopPolling]);\n  if (loading) return 'cargando...';\n  console.log(data);\n  const {\n    mejoresClientes\n  } = data;\n  const clienteGrafica = [];\n  mejoresClientes.map((cliente, index) => {\n    clienteGrafica[index] = _objectSpread({}, cliente.cliente[0], {\n      total: cliente.total\n    });\n  });\n  return __jsx(Layout, null, __jsx(\"h1\", {\n    className: \"text-2xl text-gray-800 font-light\"\n  }, \"Mejores Clientes\"), __jsx(BarChart, {\n    className: \"mt-10\",\n    width: 600,\n    height: 500,\n    data: clienteGrafica,\n    margin: {\n      top: 5,\n      right: 30,\n      left: 20,\n      bottom: 5\n    }\n  }, __jsx(CartesianGrid, {\n    strokeDasharray: \"3 3\"\n  }), __jsx(XAxis, {\n    dataKey: \"nombre\"\n  }), __jsx(YAxis, null), __jsx(Tooltip, null), __jsx(Legend, null), __jsx(Bar, {\n    dataKey: \"total\",\n    fill: \"#3182CE\"\n  })));\n};\nexport default MejoresClientes;","map":null,"metadata":{},"sourceType":"module"}