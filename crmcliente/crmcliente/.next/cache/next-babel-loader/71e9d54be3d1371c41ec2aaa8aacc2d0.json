{"ast":null,"code":"var __jsx = React.createElement;\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == typeof i ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != typeof i) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nimport React, { useReducer } from 'react';\nimport PedidoContext from './PedidoContext';\nimport PedidoReducer from './PedidoReducer';\nimport { SELECCIONAR_CLIENTE, SELECCIONAR_PRODUCTO, CANTIDAD_PRODUCTOS, ACTUALIZAR_TOTAL } from '../../types';\nconst PedidoState = ({\n  children\n}) => {\n  // State de Pedidos\n  const initialState = {\n    cliente: {},\n    productos: [],\n    total: 0\n  };\n  const {\n    0: state,\n    1: dispatch\n  } = useReducer(PedidoReducer, initialState);\n\n  // Modifica el Cliente\n  const agregarCliente = cliente => {\n    // console.log(cliente);\n\n    dispatch({\n      type: SELECCIONAR_CLIENTE,\n      payload: cliente\n    });\n  };\n\n  // Modifica los productos\n  const agregarProducto = productosSeleccionados => {\n    let nuevoState;\n    if (state.productos.length > 0) {\n      // Tomar del segundo arreglo, una copia para asignarlo al primero\n      nuevoState = productosSeleccionados.map(producto => {\n        const nuevoObjeto = state.productos.find(productoState => productoState.id === producto.id);\n        return _objectSpread({}, producto, {}, nuevoObjeto);\n      });\n    } else {\n      nuevoState = productosSeleccionados;\n    }\n    dispatch({\n      type: SELECCIONAR_PRODUCTO,\n      payload: nuevoState\n    });\n  };\n\n  // Modifica las cantidades de los productos\n  const cantidadProductos = nuevoProducto => {\n    dispatch({\n      type: CANTIDAD_PRODUCTOS,\n      payload: nuevoProducto\n    });\n  };\n  const actualizarTotal = () => {\n    dispatch({\n      type: ACTUALIZAR_TOTAL\n    });\n  };\n  return __jsx(PedidoContext.Provider, {\n    value: {\n      cliente: state.cliente,\n      productos: state.productos,\n      total: state.total,\n      agregarCliente,\n      agregarProducto,\n      cantidadProductos,\n      actualizarTotal\n    }\n  }, \" \", children);\n};\nexport default PedidoState;","map":null,"metadata":{},"sourceType":"module"}