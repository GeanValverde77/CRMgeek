{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nimport React, { useReducer } from 'react';\nimport PedidoContext from './PedidoContext';\nimport PedidoReducer from './PedidoReducer';\nimport { SELECCIONAR_CLIENTE, SELECCIONAR_PRODUCTO, CANTIDAD_PRODUCTOS, ACTUALIZAR_TOTAL } from '../../types';\nvar PedidoState = function PedidoState(_ref) {\n  var children = _ref.children;\n  // State de Pedidos\n  var initialState = {\n    cliente: {},\n    productos: [],\n    total: 0\n  };\n  var _useReducer = useReducer(PedidoReducer, initialState),\n    state = _useReducer[0],\n    dispatch = _useReducer[1];\n\n  // Modifica el Cliente\n  var agregarCliente = function agregarCliente(cliente) {\n    // console.log(cliente);\n\n    dispatch({\n      type: SELECCIONAR_CLIENTE,\n      payload: cliente\n    });\n  };\n\n  // Modifica los productos\n  var agregarProducto = function agregarProducto(productosSeleccionados) {\n    var nuevoState;\n    if (state.productos.length > 0) {\n      // Tomar del segundo arreglo, una copia para asignarlo al primero\n      nuevoState = productosSeleccionados.map(function (producto) {\n        var nuevoObjeto = state.productos.find(function (productoState) {\n          return productoState.id === producto.id;\n        });\n        return _objectSpread({}, producto, {}, nuevoObjeto);\n      });\n    } else {\n      nuevoState = productosSeleccionados;\n    }\n    dispatch({\n      type: SELECCIONAR_PRODUCTO,\n      payload: nuevoState\n    });\n  };\n\n  // Modifica las cantidades de los productos\n  var cantidadProductos = function cantidadProductos(nuevoProducto) {\n    dispatch({\n      type: CANTIDAD_PRODUCTOS,\n      payload: nuevoProducto\n    });\n  };\n  var actualizarTotal = function actualizarTotal() {\n    dispatch({\n      type: ACTUALIZAR_TOTAL\n    });\n  };\n  return __jsx(PedidoContext.Provider, {\n    value: {\n      cliente: state.cliente,\n      productos: state.productos,\n      total: state.total,\n      agregarCliente: agregarCliente,\n      agregarProducto: agregarProducto,\n      cantidadProductos: cantidadProductos,\n      actualizarTotal: actualizarTotal\n    }\n  }, \" \", children);\n};\nexport default PedidoState;","map":null,"metadata":{},"sourceType":"module"}